@page "/demo"
@using System.Threading
@using ts.Domain.Entities

@inject HttpClient Http

<div> @DebugText()</div>

<div style="display: flex">
    <div style="flex: 33%; margin: 20px;">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th scope="col">&nbsp;</th>
                    <th scope="col">LocalizedSite name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var localizedSite in _sampleEntities)
                {
                    <tr onclick=@(() => SelectParentEntity(localizedSite.Id)) class="@(localizedSite.Id == SelectedParentEntityId ? "selected" : "")">
                        <td><span class="oi oi-check" hidden="@(localizedSite.Id != SelectedParentEntityId)"></span></td>
                        <td>@localizedSite.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@functions {
    public int SelectedParentEntityId { get; set; }
    public int Changes { get; set; }
    public bool Saving { get; set; }

    List<SampleEntity> _sampleEntities = new List<SampleEntity>();

    string DebugText()
    {
        return $"MODEL: SelectedLocalizedSite={SelectedParentEntityId} Changes={Changes} Saving={Saving}";
    }


    protected override async Task OnInitAsync()
    {

        _sampleEntities = await Http.GetJsonAsync<List<SampleEntity>>("api/site/GetSampleEtities");

    }

    void SelectParentEntity(int id)
    {
        SelectedParentEntityId = id;
        //find child entity
    }

    private void RemoveSampleEntity(Guid id)
    {
        var site = _sampleEntities.First(s => s.Id == SelectedParentEntityId);
//remove
        Changes += 1;
        SaveDelayed();
    }

    private void AddSampleEntity(Guid id)
    {
//...
        Changes++;
        SaveDelayed();
    }


    private void SaveDelayed()
    {
        if (Saving) { return; }
        Saving = true;
        var timer = new Timer(_ =>
        {
            Saving = false;
            Changes = 0;
            StateHasChanged();
        }, null, 3000, Timeout.Infinite);
    }

}

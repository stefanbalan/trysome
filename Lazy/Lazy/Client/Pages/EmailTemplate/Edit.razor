@page "/EmailTemplate/Edit/{TemplateId:int}"
@using Lazy.Model
@using Lazy.Client.Services

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject DataService<EmailTemplateModel> DataService

<PageTitle>Edit template</PageTitle>
<h2>Editor</h2>
<RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Flat" Click="GoBack">Cancel</RadzenButton>
<RadzenButton Icon="save" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Click="Save">Save</RadzenButton>

<RadzenTextBox bind-Value="@_emailTemplate.Name"></RadzenTextBox>

<RadzenHtmlEditor @bind-Value=@_emailTemplate.Text style="height: 500px; margin-bottom: 1rem;" UploadUrl="upload/image">
    <RadzenHtmlEditorUndo/>
    <RadzenHtmlEditorRedo/>
    <RadzenHtmlEditorSeparator/>
    <RadzenHtmlEditorBold/>
    <RadzenHtmlEditorItalic/>
    <RadzenHtmlEditorUnderline/>
    <RadzenHtmlEditorStrikeThrough/>
    <RadzenHtmlEditorSeparator/>
    <RadzenHtmlEditorColor/>
    <RadzenHtmlEditorBackground/>
    <RadzenHtmlEditorRemoveFormat/>
</RadzenHtmlEditor>

<div>param @TemplateId</div>

@code {

    [Parameter]
    public int? TemplateId { get; set; }

    
    private readonly EmailTemplateModel _defaultEmailTemplateModel = new() { Html = true };
    private EmailTemplateModel _emailTemplate = new() { Html = true };

    protected override async Task OnParametersSetAsync()
    {
        if (TemplateId is null or 0)
            _emailTemplate = new EmailTemplateModel();
        else
            _emailTemplate = await DataService.GetById(TemplateId.Value) ?? _defaultEmailTemplateModel;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/EmailTemplate/List");
    }

    private async Task Save()
    {
        _emailTemplate = await DataService.CreateOrUpdate(_emailTemplate) ?? _defaultEmailTemplateModel;
    }

}
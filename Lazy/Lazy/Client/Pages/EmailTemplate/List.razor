@page "/EmailTemplate/List"
@inherits PagingComponent

@using Lazy.Client.Services
@using Lazy.Model

@inject DialogService DialogService
@inject UserSettingsService UserSettings
@inject NavigationManager NavigationManager

<h2>Email templates</h2>

<RadzenButton Icon="plus" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Click="AddTemplate">Add</RadzenButton>

<div class="col-md-12 col-lg-8 p-3">
    <RadzenCard>
        <RadzenTextBox @oninput=@OnSearchTextChanged Class="w-100"/>
    </RadzenCard>

    <RadzenDataGrid @ref="grid" TItem="EmailTemplateModel"
                    AllowPaging="true" PageSize="@_pageSize" PageSizeOptions="@_pageSizeOptions"
                    Data="@data" Count="count" IsLoading="@_isLoading" LoadData="@LoadData"
                    ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn Width="50px" TItem="EmailTemplateModel" Property="Id" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center"/>

            <RadzenDataGridColumn TItem="EmailTemplateModel" Property="Name" Title="Name" MinWidth="250px"/>

            <RadzenDataGridColumn TItem="EmailTemplateModel" Property="Html" Title="Is HTML">
                <Template Context="et">
                    <RadzenCheckBox @bind-Value="@et.Html" Disabled="true"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="EmailTemplateModel" Property="ID" Title="Edit">
                <Template Context="et">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Variant="Variant.Text"
                                  Icon="edit" Class="m-1" Click="@(() => EditTemplate(et.Id))" Text="Edit"/>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Text" 
                                  Icon="delete" Class="m-1" Click="@(() => DeleteTemplate(et.Id))" Text="Delete"/>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>


@code {
        const string apiUrl = "/api/EmailTemplate";
    readonly IEnumerable<int> _pageSizeOptions = new[] { 5, 10, 20, 30 };
    private int _pageSize;
    private int _pageNumber;
    private bool _isLoading;

    [Parameter]
    public int? PageSize { get; set; }

    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string? SearchString { get; set; }

    RadzenDataGrid<EmailTemplateModel> grid = null!;
    private List<EmailTemplateModel> data = new();
    private int count;

    protected override void OnInitialized()
    {
        (_pageSize, _pageNumber) = SetPageSizeAndNumber(_pageSize, _pageNumber);
    }

    protected override async Task OnParametersSetAsync()
    {
        (_pageSize, _pageNumber) = SetPageSizeAndNumber(_pageSize, _pageNumber);
        await GetData();
    }


    private void OnSearchTextChanged(ChangeEventArgs changeEventArgs)
    {
    }

    private void AddTemplate()
    {
        NavigationManager.NavigateTo($"/EmailTemplate/Edit/{0}");
    }

    private void EditTemplate(int id)
    {
        NavigationManager.NavigateTo($"/EmailTemplate/Edit/{id}");
    }

    private async Task DeleteTemplate(int id)
    {
        await DeleteById(apiUrl, id);
        await GetData();
    }

    private async Task LoadData(LoadDataArgs arg)
    {
        (_pageSize, _pageNumber) = SetPageSizeAndNumber(arg.Top, arg.Skip / arg.Top);

        await GetData();
    }

    private (int pageSize, int pageNumber) SetPageSizeAndNumber(int? ps, int? pn)
    {
        var pageSize = ps is null or 0 ? UserSettings.PageSize : ps.Value;
        var pageNumber = pn is null or <0 ? 0 : pn.Value;
        return (pageSize, pageNumber);
    }

    private async Task GetData()
    {
        _isLoading = true;
        Dictionary<string, string>? search = null;
        if (!string.IsNullOrWhiteSpace(SearchString))
            search = new Dictionary<string, string> { { "search", SearchString } };
        var pagedResult = await GetPageAsync<EmailTemplateModel>(apiUrl, _pageSize, _pageNumber, search);
        data = pagedResult.Results;
        count = pagedResult.Count;
        _isLoading = false;
    }
}
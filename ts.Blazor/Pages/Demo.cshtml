@page "/demo"
@using System.Threading
@inject HttpClient Http

<div> @DebugText</div>

<div style="display: flex">
    <div style="flex: 33%; margin: 20px;">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th scope="col">&nbsp;</th>
                    <th scope="col">Site name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var site in Sites)
                {
                    <tr onclick=@(() => SelectSite(site.Id)) class="@(site.Id == SelectedSite ? "selected" : "")">
                        <td><span class="oi oi-check" hidden="@(site.Id != SelectedSite)"></span></td>
                        <td>@site.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div  style="flex: 33%; margin: 20px;">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sserver in SiteServers)
                {
                    <tr onclick=@(() => RemoveServer(sserver.Id) )>
                        <td>@sserver.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="flex: 33%; margin: 20px;">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var server in AvailableServers)
                {
                    <tr onclick=@(() => AddServer(server.Id) )>
                        <td>@server.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@functions {

    List<Site> Sites { get; set; } = new List<Site>();
    List<Server> SiteServers { get; set; } = new List<Server>();
    List<Server> Servers { get; set; } = new List<Server>();
    List<Server> AvailableServers { get; set; } = new List<Server>();

    string DebugText => $"MODEL: SelectedSite={SelectedSite} Changes={Changes} Saving={Saving}";

    public int SelectedSite { get; set; }
    public int Changes { get; set; }
    public bool Saving { get; set; }


    protected override async Task OnInitAsync()
    {
        Sites = await Http.GetJsonAsync<List<Site>>("sample-data/sites.json");
        Servers = await Http.GetJsonAsync<List<Server>>("sample-data/servers.json");
    }

    void SelectSite(int id)
    {
        SelectedSite = id;
        SiteServers = Sites.Single(s => s.Id == id).Servers?.ToList() ?? new List<Server>();
        AvailableServers = Servers.FindAll(s => SiteServers.All(ss => ss.Id != s.Id));
    }

    private void RemoveServer(Guid id)
    {
        var site = Sites.First(s => s.Id == SelectedSite);
        var serv = site.Servers.First(s => s.Id == id);
        if (site.Servers.Remove(serv))
            SiteServers = site.Servers.ToList();
        AvailableServers = Servers.FindAll(s => SiteServers.All(ss => ss.Id != s.Id));
        Changes+=1;
        SaveDelayed();
    }

    private void AddServer(Guid id)
    {
        var site = Sites.First(s => s.Id == SelectedSite);
        var serv = Servers.First(s => s.Id == id);
        if (site.Servers == null) site.Servers = new List<Server>();
        site.Servers.Add(serv);
        SiteServers = site.Servers.ToList();
        AvailableServers = Servers.FindAll(s => SiteServers.All(ss => ss.Id != s.Id));
        Changes++;
        SaveDelayed();
    }


    private void SaveDelayed()
    {
        if (Saving) return;
        Saving = true;
        var timer = new Timer(new TimerCallback(_ =>
        {
            Saving = false;
            Changes = 0;
            StateHasChanged();
        }), null, 3000, Timeout.Infinite);
    }
}

